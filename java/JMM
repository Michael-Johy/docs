CPU和缓存一致性问题
   同比计算机内存模型: CPU需要从主内存中读取数据，由于CPU运算速度和内存读取和写入数据的数据不匹配，提出了高速缓存L1、L2等
   在单核CPU情况下，单线程或多线程共享缓存
   在多核CPU情况下，多个线程的高速缓存的内容可能不一致，出现缓存不一致情况

处理器优化和指令重排
   处理器优化：为了使处理器内部的运算单元能够尽量的被充分利用，处理器可能会对输入代码进行乱序执行处理
   Java编译器也会做指令重排


并发编程的问题：原子性、可见性、有序性
   原子性、可见性、有序性是抽象问题，是针对缓存一致性、处理器优化和指令重排等底层问题提出的
   
   
内存模型
  定义：为了保证共享内存的正确性(原子性、可见性、有序性)， 定义了共享内存系统中多线程程序读写操作行为的规范， 
       解决了CPU多级缓存、处理器优化、指令重排等导致的内存访问问题
  解决并发问题方式：禁止指令重排和使用内存屏障

JVM内存模型
  定义：一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。
  JMM是一种规范，目的是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。
  
  实现：volatile、synchronize、final、concurrent Java内存模型封装了底层的实现后提供给程序员使用的一些关键字
  
 
 blog: https://www.hollischuang.com/archives/2550
   
   
  
